{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","applySetResult","result","prevState","after","data","children","isLoading","onPaginate","e","state","sub","setState","fetch","then","response","json","onSetResult","catch","error","this","className","container","Component","RedditListContainer","onScroll","window","innerHeight","scrollY","document","body","offsetHeight","length","addEventListener","removeEventListener","map","item","link","permalink","subreddit_name_prefixed","thumbnail","title","RedditListItem","src","alt","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","URL","process","origin","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.83967f94.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './index.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      after: null,\r\n      children: [],\r\n      isLoading: false,\r\n      sub: 'aww'\r\n    };\r\n  }\r\n\r\n  applySetResult = (result) => (prevState) => (\r\n    prevState ? { after: result.data.after, children: [...prevState.children, ...result.data.children], isLoading: false } : { after: result.data.after, children: result.data.children, isLoading: false });\r\n  \r\n  /*\r\n  onInitialSetup = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { value } = this.input;\r\n\r\n    if (value === '') { return; }\r\n\r\n    fetch(`https://www.reddit.com/r/${value}/new.json`).then(response => response.json()).then(result => this.onSetResult(result)).catch(error => error);\r\n  }\r\n\r\n  onPaginate = (e) => {\r\n    const { after } = this.state;\r\n\r\n    this.setState({ isLoading: true });\r\n    fetch(`https://www.reddit.com/r/${this.input.value}/new.json?count=25&after=${after}`).then(response => response.json()).then(result => this.onSetResult(result)).catch(error => error);\r\n  }\r\n  */\r\n\r\n  onPaginate = (e) => {\r\n    const { after, sub } = this.state;\r\n\r\n    this.setState({ isLoading: true });\r\n    fetch(`https://www.reddit.com/r/${sub}/new.json?count=25&after=${after}`).then(response => response.json()).then(result => this.onSetResult(result)).catch(error => error);\r\n  }\r\n\r\n  onSetResult = (result) =>\r\n    this.setState(this.applySetResult(result));\r\n\r\n  componentDidMount() {\r\n    const { sub } = this.state;\r\n\r\n    fetch(`https://www.reddit.com/r/${sub}/new.json`).then(response => response.json()).then(result => this.onSetResult(result)).catch(error => error);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <RedditListContainer\r\n          container={this.state.children} \r\n          isLoading={this.state.isLoading}\r\n          onPaginate={this.onPaginate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  /*\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"subreddit\">\r\n          <form type=\"submit\" onSubmit={this.onInitialSetup}>\r\n            <input type=\"text\" ref={ node => this.input = node } className=\"input\" />\r\n            <button type=\"submit\">Get subreddit</button>\r\n          </form>\r\n        </div>\r\n        <RedditListContainer\r\n          container={this.state.children} \r\n          isLoading={this.state.isLoading}\r\n          onPaginate={this.onPaginate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  */\r\n}\r\n\r\nclass RedditListContainer extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.onScroll, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.onScroll, false);\r\n  }\r\n\r\n  onScroll = () => {\r\n    if ((window.innerHeight + window.scrollY) >= (document.body.offsetHeight - 500) && this.props.container.length && !this.props.isLoading) {\r\n      this.props.onPaginate();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { container } = this.props;\r\n    \r\n    return (\r\n      <div className=\"container\">\r\n        {container.map(item => <RedditListItem link={'https://reddit.com' + item.data.permalink} sub={item.data.subreddit_name_prefixed} thumbnail={item.data.thumbnail} title={item.data.title} />)}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nclass RedditListItem extends Component {\r\n  render() {\r\n    const { link, sub, thumbnail, title } = this.props;\r\n\r\n    return (\r\n      <div className=\"row item\">\r\n        <div className=\"col-md-4 thumbnail\">\r\n          <img src={thumbnail} alt={title} />\r\n        </div>\r\n        <div className=\"col-md-8 label\">\r\n          <span className=\"sub\">{sub}</span><br />\r\n          <span className=\"title\"><a href={link}>{title}</a></span>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/css/bootstrap-theme.css';\r\nimport './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\nconst rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}